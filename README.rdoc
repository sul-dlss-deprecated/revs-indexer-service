
{<img src="https://travis-ci.org/sul-dlss/revs-indexer-service.svg?branch=master" alt="Build Status" />}[https://travis-ci.org/sul-dlss/revs-indexer-service]  {<img src="https://coveralls.io/repos/sul-dlss/revs-indexer-service/badge.svg" alt="Coverage Status" />}[https://coveralls.io/r/sul-dlss/revs-indexer-service]


=RevsIndexerSevice

Code to harvest Revs metadata from DOR and index it into Solr for the Revs Digital Library application

== Installing

* checkout code
* cp config/solr.yml.example config/solr.yml
* edit config/solr.yml file to add in actual solr URLs for each target
* bundle install

== Rake Tasks For Indexing Druids

=== Index a single druid:

rake index RAILS_ENV=production target=revs_prod druid=oo000oo0001

=== Index a list of druids from a pre-assembly run or a remeditaion run:

rake log_indexer RAILS_ENV=production target=revs_prod log_file=/tmp/mailander_1.yaml log_type=preassembly  # preassembly run
nohup rake log_indexer RAILS_ENV=production target=revs_prod log_file=/tmp/mailander_1.yaml log_type=preassembly &  # for a long running process, nohup it, you will also get an out.log file for reindexing errored out druids if needed

rake log_indexer RAILS_ENV=production target=revs_prod log_file=/tmp/mailander_1.yaml log_type=remediate # remediation run 

tail nohup.out # for a nohup task, tail the log 

=== Index an entire collection, including the collection itself, along with all of its members (be sure to check the dor-fetcher-url parameter in the Rails environment you are running under to be sure it is connecting where you expect):

rake index_collection RAILS_ENV=production target=revs_prod collection_druid=oo000oo0001
nohup rake index_collection RAILS_ENV=production target=revs_prod collection_druid=oo000oo0001 &   # for a long running process, nohup it, you will also get an out.log file for reindexing errored out druids if needed

=== Re-Index Just Errored Out Items

If you used nonup or you redirected output to a file when indexing an entire collection or a specific list of druids, you can re-run indexing with that nohup file so it can try and reindex only the items that errored out.

rake reindex_errors RAILS_ENV=production target=revs_prod file=nohup.out

You could also nohup the output of this file if you wanted, but be sure to rediect to a different filename.

nohup rake reindex_errors RAILS_ENV=production target=revs_prod file=nohup.out > reindex.out 2>&1&



== Testing on the command line and indexing a single document

rails c

  pid='bb895tg4452'
  indexer = BaseIndexer::MainIndexerEngine.new

  # to just perform an index of a document:
  indexer.index(pid,['revs']) # do the full indexing (including posting to solr), the 'revs' indicates the configured solr url target in the solr.yml config file 
  
  indexer.delete pid # delete the druid (from all targets!! so be careful)
  
  # to manually fetch xml and then test out mapping
  purl=indexer.read_purl(pid) # will go out to actual purl page and grab full public xml
  mods=indexer.read_mods(pid) # will go out to actual purl page and grab full mods
  collection_names=indexer.get_collection_names(purl.collection_druids) # will get collections this pid belongs to

  mapper = RevsMapper.new(pid,mods,purl,collection_names)
  puts mapper.map # will perform a mapping to solr_doc

== Running tests

bundle exec rspec spec

Should be run automatically via Travis-CI

== Deploying

  bundle exec cap production deploy   # for production
  bundle exec cap staging deploy      # for staging   
  bundle exec cap development deploy  # for development
